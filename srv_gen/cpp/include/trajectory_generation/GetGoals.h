/* Auto-generated by genmsg_cpp for file /home/ubuntu/AMSL_ros_pkg/masanobusan/infant_ver/20130928/trajectory_generation/srv/GetGoals.srv */
#ifndef TRAJECTORY_GENERATION_SERVICE_GETGOALS_H
#define TRAJECTORY_GENERATION_SERVICE_GETGOALS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseStamped.h"

namespace trajectory_generation
{
template <class ContainerAllocator>
struct GetGoalsRequest_ {
  typedef GetGoalsRequest_<ContainerAllocator> Type;

  GetGoalsRequest_()
  {
  }

  GetGoalsRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetGoalsRequest
typedef  ::trajectory_generation::GetGoalsRequest_<std::allocator<void> > GetGoalsRequest;

typedef boost::shared_ptr< ::trajectory_generation::GetGoalsRequest> GetGoalsRequestPtr;
typedef boost::shared_ptr< ::trajectory_generation::GetGoalsRequest const> GetGoalsRequestConstPtr;



template <class ContainerAllocator>
struct GetGoalsResponse_ {
  typedef GetGoalsResponse_<ContainerAllocator> Type;

  GetGoalsResponse_()
  : goals()
  {
  }

  GetGoalsResponse_(const ContainerAllocator& _alloc)
  : goals(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _goals_type;
  std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  goals;


  typedef boost::shared_ptr< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetGoalsResponse
typedef  ::trajectory_generation::GetGoalsResponse_<std::allocator<void> > GetGoalsResponse;

typedef boost::shared_ptr< ::trajectory_generation::GetGoalsResponse> GetGoalsResponsePtr;
typedef boost::shared_ptr< ::trajectory_generation::GetGoalsResponse const> GetGoalsResponseConstPtr;


struct GetGoals
{

typedef GetGoalsRequest Request;
typedef GetGoalsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetGoals
} // namespace trajectory_generation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/GetGoalsRequest";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3283f3fdb1be1e6c791c1c7cdf8d5ab4";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3283f3fdb1be1e6cULL;
  static const uint64_t static_value2 = 0x791c1c7cdf8d5ab4ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/GetGoalsResponse";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped[] goals\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::GetGoalsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGoalsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::GetGoalsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goals);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetGoalsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<trajectory_generation::GetGoals> {
  static const char* value() 
  {
    return "3283f3fdb1be1e6c791c1c7cdf8d5ab4";
  }

  static const char* value(const trajectory_generation::GetGoals&) { return value(); } 
};

template<>
struct DataType<trajectory_generation::GetGoals> {
  static const char* value() 
  {
    return "trajectory_generation/GetGoals";
  }

  static const char* value(const trajectory_generation::GetGoals&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::GetGoalsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3283f3fdb1be1e6c791c1c7cdf8d5ab4";
  }

  static const char* value(const trajectory_generation::GetGoalsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::GetGoalsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/GetGoals";
  }

  static const char* value(const trajectory_generation::GetGoalsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::GetGoalsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3283f3fdb1be1e6c791c1c7cdf8d5ab4";
  }

  static const char* value(const trajectory_generation::GetGoalsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::GetGoalsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/GetGoals";
  }

  static const char* value(const trajectory_generation::GetGoalsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TRAJECTORY_GENERATION_SERVICE_GETGOALS_H

