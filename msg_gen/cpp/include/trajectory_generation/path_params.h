/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/trajectory_generation/msg/path_params.msg */
#ifndef TRAJECTORY_GENERATION_MESSAGE_PATH_PARAMS_H
#define TRAJECTORY_GENERATION_MESSAGE_PATH_PARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace trajectory_generation
{
template <class ContainerAllocator>
struct path_params_ {
  typedef path_params_<ContainerAllocator> Type;

  path_params_()
  : header()
  , k0(0.0)
  , k1(0.0)
  , kf(0.0)
  , sf(0.0)
  , v0(0.0)
  , a0(0.0)
  , vt(0.0)
  , af(0.0)
  , vf(0.0)
  , dt(0.0)
  {
  }

  path_params_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , k0(0.0)
  , k1(0.0)
  , kf(0.0)
  , sf(0.0)
  , v0(0.0)
  , a0(0.0)
  , vt(0.0)
  , af(0.0)
  , vf(0.0)
  , dt(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _k0_type;
  float k0;

  typedef float _k1_type;
  float k1;

  typedef float _kf_type;
  float kf;

  typedef float _sf_type;
  float sf;

  typedef float _v0_type;
  float v0;

  typedef float _a0_type;
  float a0;

  typedef float _vt_type;
  float vt;

  typedef float _af_type;
  float af;

  typedef float _vf_type;
  float vf;

  typedef float _dt_type;
  float dt;


  typedef boost::shared_ptr< ::trajectory_generation::path_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::path_params_<ContainerAllocator>  const> ConstPtr;
}; // struct path_params
typedef  ::trajectory_generation::path_params_<std::allocator<void> > path_params;

typedef boost::shared_ptr< ::trajectory_generation::path_params> path_paramsPtr;
typedef boost::shared_ptr< ::trajectory_generation::path_params const> path_paramsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::trajectory_generation::path_params_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::trajectory_generation::path_params_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace trajectory_generation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::path_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::path_params_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::path_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "812f1602d0a7f957c7fee57f72518c38";
  }

  static const char* value(const  ::trajectory_generation::path_params_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x812f1602d0a7f957ULL;
  static const uint64_t static_value2 = 0xc7fee57f72518c38ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::path_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/path_params";
  }

  static const char* value(const  ::trajectory_generation::path_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::path_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 k0\n\
float32 k1\n\
float32 kf\n\
float32 sf\n\
float32 v0\n\
float32 a0\n\
float32 vt\n\
float32 af\n\
float32 vf\n\
float32 dt\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::path_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::trajectory_generation::path_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::trajectory_generation::path_params_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::path_params_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.k0);
    stream.next(m.k1);
    stream.next(m.kf);
    stream.next(m.sf);
    stream.next(m.v0);
    stream.next(m.a0);
    stream.next(m.vt);
    stream.next(m.af);
    stream.next(m.vf);
    stream.next(m.dt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct path_params_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trajectory_generation::path_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::trajectory_generation::path_params_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "k0: ";
    Printer<float>::stream(s, indent + "  ", v.k0);
    s << indent << "k1: ";
    Printer<float>::stream(s, indent + "  ", v.k1);
    s << indent << "kf: ";
    Printer<float>::stream(s, indent + "  ", v.kf);
    s << indent << "sf: ";
    Printer<float>::stream(s, indent + "  ", v.sf);
    s << indent << "v0: ";
    Printer<float>::stream(s, indent + "  ", v.v0);
    s << indent << "a0: ";
    Printer<float>::stream(s, indent + "  ", v.a0);
    s << indent << "vt: ";
    Printer<float>::stream(s, indent + "  ", v.vt);
    s << indent << "af: ";
    Printer<float>::stream(s, indent + "  ", v.af);
    s << indent << "vf: ";
    Printer<float>::stream(s, indent + "  ", v.vf);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TRAJECTORY_GENERATION_MESSAGE_PATH_PARAMS_H

